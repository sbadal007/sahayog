rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection rules
    match /users/{userId} {
      allow read: if true;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Username mappings - allow read for authentication
    match /usernames/{username} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.uid;
    }
    
    // Requests collection rules
    match /requests/{requestId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Offers collection rules
    match /offers/{offerId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.helperId || 
        request.auth.uid == resource.data.requesterId
      );
      allow write: if request.auth != null && (
        request.auth.uid == resource.data.helperId || 
        request.auth.uid == resource.data.requesterId
      );
      allow create: if request.auth != null;
    }
    
    // Ratings collection rules - REQUIRED FOR RATING SYSTEM
    match /ratings/{ratingId} {
      // Allow reading ratings for authenticated users
      allow read: if request.auth != null;
      
      // Allow creating ratings only by authenticated users who are the reviewer
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.reviewerId &&
        // Ensure required fields exist
        request.resource.data.keys().hasAll(['reviewerId', 'revieweeId', 'rating', 'createdAt']) &&
        // Validate rating is between 1-5
        request.resource.data.rating >= 1 && request.resource.data.rating <= 5;
      
      // Allow updates only to visibility (isVisible field) by the reviewer
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.reviewerId &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isVisible']);
      
      // Prevent deletes to maintain rating integrity
      allow delete: if false;
    }
    
    // User rating summaries collection rules - REQUIRED FOR RATING SYSTEM
    match /userRatingSummaries/{userId} {
      // Allow reading rating summaries for authenticated users
      allow read: if request.auth != null;
      
      // Allow writing summaries for authenticated users (system updates)
      allow write: if request.auth != null;
    }
    
    // CHAT SYSTEM RULES - ENHANCED SECURITY
    // Conversations collection rules
    match /conversations/{conversationId} {
      // Only allow participants to read/write their conversations
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creation only if user is one of the participants and required fields exist
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants &&
        // Ensure required fields exist for conversations
        request.resource.data.keys().hasAll(['participants', 'lastMessageAt', 'isArchived']) &&
        // Ensure participants array has exactly 2 members
        request.resource.data.participants.size() == 2;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Only participants can read messages
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
        
        // Only allow message creation by authenticated participants with required fields
        allow create: if request.auth != null && 
          request.auth.uid == request.resource.data.senderId &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          // Ensure required message fields exist
          request.resource.data.keys().hasAll(['senderId', 'text', 'createdAt', 'readBy']) &&
          // Ensure message text is not empty
          request.resource.data.text.size() > 0;
        
        // Allow updates only to readBy field by participants
        allow update: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['readBy']);
        
        // No deletes allowed to preserve message history
        allow delete: if false;
      }
      
      // Typing indicators subcollection
      match /typing/{userId} {
        // Only allow users to update their own typing status
        allow read, write: if request.auth != null && 
          request.auth.uid == userId &&
          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // Archived conversations collection rules
    match /archived_conversations/{conversationId} {
      // Only participants can read archived conversations
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Only allow system/Cloud Functions to write (create during archiving)
      // For now, allow authenticated users (should be restricted to Cloud Functions in production)
      allow write: if request.auth != null;
      
      // Archived messages subcollection (read-only)
      match /messages/{messageId} {
        allow read: if request.auth != null && 
          request.auth.uid in get(/databases/$(database)/documents/archived_conversations/$(conversationId)).data.participants;
        
        // No writes allowed - archived messages are read-only
        allow write: if false;
      }
    }
    
    // Notifications collection rules
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
    }
  }
}
